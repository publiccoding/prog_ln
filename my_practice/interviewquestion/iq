Oracle:

Python:

if you import module in another module it will create __pycache__ file under that it will create bytecode of the module imported 
1. In Unix how python module will work ( environment) how python will interpret ( python working tree) python architecture
Pretty much every Python implementation consists of an interpreter (rather than a compiler). The .pyc files you see are byte code for the Python virtual machine (similar to Java's .class files). They are not the same as the machine code generated by a C compiler for a native machine architecture. Some Python implementations, however, do consist of a just-in-time compiler that will compile Python byte code into native machine code.

A python code (somefile.py) when imported creates a file (somefile.pyc) in the same directory. Let us say the import is done in a python shell or django module. After the import I change the code a bit and execute the imported functions again to find that it is still running the old code. This suggests that *.pyc files are compiled python files similar to executable created after compilation of a C file, though I can't execute *.pyc file directly.

2. which python moduel will convert python 2.7 to 3.0
C:\python\Tools\scripts>2to3.py -n -w C:\Users\kristhim\Desktop\thimma\git\prog_ln\practice\pytest2.7.py
3. Generator defference and syntax
4. print(type[1,2])
5. python testing?
6. debugging the logicall flow 
7. python 2 and 3 difference 
8. JSON 
9. file operation ( how will know python file is closed ? )
10. exception handling in python( file operation exception handlings? )
11. pyauto , pylint
12. can you use inner method in python 

Unix :
1. find command ( size 100G)
2. awk ( sum of third column value on two fields in file)
3. print 2nd to 4th line in file ( sed)
4. for loop ( range of two values)
admin: 
starting services , 

ansible:
rename file in anisble and show the status.
ansible tree

storage : 
difference between NAS and SAN 
Raids: ( which is best raid)



=========================================================================================
TCS:

Python:
1. OOP ( self, new)
2. subprocess module 
3. how to execute two command in linux and get the output
4. rest api and ( paramiko )
5. socket programming 
6. regular expression ( match, findall , finditer, sub, split)
7. multithreading and multiprocesssing 
8. working on json data 







3 __slots__ together with __dict__
Can instance's __dict__ attribute exist together with the __slots__?
The solution is simple: add the __dict__ to the __slots__ list.
class Member(object):
    __slots__ = ['id', 'name', 'age', '__dict__']

>>> m2 = Member()
>>> m2.id = 2
>>> m2.name = 'M2'
>>> m2.age = 11

>>> m2.job = 'Student'
>>> print(m2.__dict__)
{'job': 'Student'}


p = Popen(shlex.split(command), stdin=PIPE, stdout=PIPE, stderr=PIPE)
(stdout, stderr) = p.communicate()

f = open("blah.txt", "w")
subprocess.call(["/home/myuser/run.sh", "/tmp/ad_xml",  "/tmp/video_xml"], stdout=f)

subprocess.run(["ls", "-l", "/dev/null"], capture_output=True)

import shlex, subprocess
command_line = input()
/bin/vikings -input eggs.txt -output "spam spam.txt" -cmd "echo '$MONEY'"
args = shlex.split(command_line)
p = subprocess.Popen(args) # Success!

except subprocess.CalledProcessError as e:


Regular expression:


Capturing groups
Unlike the re.search() method above, we can use re.findall() to perform a global search over the whole input string. If there are capture groups in the pattern, then it will return a list of all the captured data, but otherwise, it will just return a list of the matches themselves, or an empty list if no matches are found.

If you need additional context for each match, you can use re.finditer() which instead returns an iterator of re.MatchObjects to walk through. Both methods take the same parameter

HCL:

1.will main thread exit amount start of child thread ( if yes how you will avoid that )
Yes main thread will exit to avoid this join the child thread so that main thread will  exist 
2. Object reference in python (shallow copy with copy method)
var[:] -> shallow copy without method
3.multiple inheritance and multilevel inheritance how interpreter works to do that ?
4.i have 100 lines of code where i need to find the missing closed paranthesis "}" for the each opened block 
5. i need to check 200 lines from 1000 lines and input them into different file 
6. i have list with ['apple','mango','blueberry','strowberry','caneberry'] i need to short based on berry first and then others using list comprenhsion


























